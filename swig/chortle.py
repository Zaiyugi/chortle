# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_chortle', [dirname(__file__)])
        except ImportError:
            import _chortle
            return _chortle
        if fp is not None:
            try:
                _mod = imp.load_module('_chortle', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _chortle = swig_import_helper()
    del swig_import_helper
else:
    import _chortle
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def printOglError(file, line):
    return _chortle.printOglError(file, line)
printOglError = _chortle.printOglError

def printShaderInfoLog(obj):
    return _chortle.printShaderInfoLog(obj)
printShaderInfoLog = _chortle.printShaderInfoLog

def printProgramInfoLog(obj):
    return _chortle.printProgramInfoLog(obj)
printProgramInfoLog = _chortle.printProgramInfoLog

def loadGLSLShader(file, shader_type):
    return _chortle.loadGLSLShader(file, shader_type)
loadGLSLShader = _chortle.loadGLSLShader

def releaseGLSLShader(program_id, shader_id):
    return _chortle.releaseGLSLShader(program_id, shader_id)
releaseGLSLShader = _chortle.releaseGLSLShader

def getUniformLocation(program_id, _uniformName):
    return _chortle.getUniformLocation(program_id, _uniformName)
getUniformLocation = _chortle.getUniformLocation
class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eye"] = _chortle.Camera_eye_set
    __swig_getmethods__["eye"] = _chortle.Camera_eye_get
    if _newclass:
        eye = _swig_property(_chortle.Camera_eye_get, _chortle.Camera_eye_set)
    __swig_setmethods__["aim"] = _chortle.Camera_aim_set
    __swig_getmethods__["aim"] = _chortle.Camera_aim_get
    if _newclass:
        aim = _swig_property(_chortle.Camera_aim_get, _chortle.Camera_aim_set)
    __swig_setmethods__["view"] = _chortle.Camera_view_set
    __swig_getmethods__["view"] = _chortle.Camera_view_get
    if _newclass:
        view = _swig_property(_chortle.Camera_view_get, _chortle.Camera_view_set)
    __swig_setmethods__["up"] = _chortle.Camera_up_set
    __swig_getmethods__["up"] = _chortle.Camera_up_get
    if _newclass:
        up = _swig_property(_chortle.Camera_up_get, _chortle.Camera_up_set)
    __swig_setmethods__["right"] = _chortle.Camera_right_set
    __swig_getmethods__["right"] = _chortle.Camera_right_get
    if _newclass:
        right = _swig_property(_chortle.Camera_right_get, _chortle.Camera_right_set)
    __swig_setmethods__["fov"] = _chortle.Camera_fov_set
    __swig_getmethods__["fov"] = _chortle.Camera_fov_get
    if _newclass:
        fov = _swig_property(_chortle.Camera_fov_get, _chortle.Camera_fov_set)
    __swig_setmethods__["dx"] = _chortle.Camera_dx_set
    __swig_getmethods__["dx"] = _chortle.Camera_dx_get
    if _newclass:
        dx = _swig_property(_chortle.Camera_dx_get, _chortle.Camera_dx_set)
    __swig_setmethods__["dy"] = _chortle.Camera_dy_set
    __swig_getmethods__["dy"] = _chortle.Camera_dy_get
    if _newclass:
        dy = _swig_property(_chortle.Camera_dy_get, _chortle.Camera_dy_set)
    __swig_setmethods__["dz"] = _chortle.Camera_dz_set
    __swig_getmethods__["dz"] = _chortle.Camera_dz_get
    if _newclass:
        dz = _swig_property(_chortle.Camera_dz_get, _chortle.Camera_dz_set)
    __swig_setmethods__["move_speed"] = _chortle.Camera_move_speed_set
    __swig_getmethods__["move_speed"] = _chortle.Camera_move_speed_get
    if _newclass:
        move_speed = _swig_property(_chortle.Camera_move_speed_get, _chortle.Camera_move_speed_set)
    __swig_setmethods__["look_enabled"] = _chortle.Camera_look_enabled_set
    __swig_getmethods__["look_enabled"] = _chortle.Camera_look_enabled_get
    if _newclass:
        look_enabled = _swig_property(_chortle.Camera_look_enabled_get, _chortle.Camera_look_enabled_set)
    __swig_setmethods__["zoom_enabled"] = _chortle.Camera_zoom_enabled_set
    __swig_getmethods__["zoom_enabled"] = _chortle.Camera_zoom_enabled_get
    if _newclass:
        zoom_enabled = _swig_property(_chortle.Camera_zoom_enabled_get, _chortle.Camera_zoom_enabled_set)
    __swig_setmethods__["pan_enabled"] = _chortle.Camera_pan_enabled_set
    __swig_getmethods__["pan_enabled"] = _chortle.Camera_pan_enabled_get
    if _newclass:
        pan_enabled = _swig_property(_chortle.Camera_pan_enabled_get, _chortle.Camera_pan_enabled_set)
    __swig_setmethods__["current_elev"] = _chortle.Camera_current_elev_set
    __swig_getmethods__["current_elev"] = _chortle.Camera_current_elev_get
    if _newclass:
        current_elev = _swig_property(_chortle.Camera_current_elev_get, _chortle.Camera_current_elev_set)
    __swig_setmethods__["current_azim"] = _chortle.Camera_current_azim_set
    __swig_getmethods__["current_azim"] = _chortle.Camera_current_azim_get
    if _newclass:
        current_azim = _swig_property(_chortle.Camera_current_azim_get, _chortle.Camera_current_azim_set)
    __swig_setmethods__["delta_elev"] = _chortle.Camera_delta_elev_set
    __swig_getmethods__["delta_elev"] = _chortle.Camera_delta_elev_get
    if _newclass:
        delta_elev = _swig_property(_chortle.Camera_delta_elev_get, _chortle.Camera_delta_elev_set)
    __swig_setmethods__["delta_azim"] = _chortle.Camera_delta_azim_set
    __swig_getmethods__["delta_azim"] = _chortle.Camera_delta_azim_get
    if _newclass:
        delta_azim = _swig_property(_chortle.Camera_delta_azim_get, _chortle.Camera_delta_azim_set)
    __swig_setmethods__["start_mouse_x"] = _chortle.Camera_start_mouse_x_set
    __swig_getmethods__["start_mouse_x"] = _chortle.Camera_start_mouse_x_get
    if _newclass:
        start_mouse_x = _swig_property(_chortle.Camera_start_mouse_x_get, _chortle.Camera_start_mouse_x_set)
    __swig_setmethods__["start_mouse_y"] = _chortle.Camera_start_mouse_y_set
    __swig_getmethods__["start_mouse_y"] = _chortle.Camera_start_mouse_y_get
    if _newclass:
        start_mouse_y = _swig_property(_chortle.Camera_start_mouse_y_get, _chortle.Camera_start_mouse_y_set)
    __swig_setmethods__["last_mouse_x"] = _chortle.Camera_last_mouse_x_set
    __swig_getmethods__["last_mouse_x"] = _chortle.Camera_last_mouse_x_get
    if _newclass:
        last_mouse_x = _swig_property(_chortle.Camera_last_mouse_x_get, _chortle.Camera_last_mouse_x_set)
    __swig_setmethods__["last_mouse_y"] = _chortle.Camera_last_mouse_y_set
    __swig_getmethods__["last_mouse_y"] = _chortle.Camera_last_mouse_y_get
    if _newclass:
        last_mouse_y = _swig_property(_chortle.Camera_last_mouse_y_get, _chortle.Camera_last_mouse_y_set)
    __swig_setmethods__["prev_mouse_pos"] = _chortle.Camera_prev_mouse_pos_set
    __swig_getmethods__["prev_mouse_pos"] = _chortle.Camera_prev_mouse_pos_get
    if _newclass:
        prev_mouse_pos = _swig_property(_chortle.Camera_prev_mouse_pos_get, _chortle.Camera_prev_mouse_pos_set)

    def __init__(self):
        this = _chortle.new_Camera()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _chortle.delete_Camera
    __del__ = lambda self: None
Camera_swigregister = _chortle.Camera_swigregister
Camera_swigregister(Camera)

class Uniforms(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uniforms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uniforms, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fractal_iterations"] = _chortle.Uniforms_fractal_iterations_set
    __swig_getmethods__["fractal_iterations"] = _chortle.Uniforms_fractal_iterations_get
    if _newclass:
        fractal_iterations = _swig_property(_chortle.Uniforms_fractal_iterations_get, _chortle.Uniforms_fractal_iterations_set)
    __swig_setmethods__["raymarch_iterations"] = _chortle.Uniforms_raymarch_iterations_set
    __swig_getmethods__["raymarch_iterations"] = _chortle.Uniforms_raymarch_iterations_get
    if _newclass:
        raymarch_iterations = _swig_property(_chortle.Uniforms_raymarch_iterations_get, _chortle.Uniforms_raymarch_iterations_set)
    __swig_setmethods__["flimit_x"] = _chortle.Uniforms_flimit_x_set
    __swig_getmethods__["flimit_x"] = _chortle.Uniforms_flimit_x_get
    if _newclass:
        flimit_x = _swig_property(_chortle.Uniforms_flimit_x_get, _chortle.Uniforms_flimit_x_set)
    __swig_setmethods__["flimit_y"] = _chortle.Uniforms_flimit_y_set
    __swig_getmethods__["flimit_y"] = _chortle.Uniforms_flimit_y_get
    if _newclass:
        flimit_y = _swig_property(_chortle.Uniforms_flimit_y_get, _chortle.Uniforms_flimit_y_set)
    __swig_setmethods__["flimit_z"] = _chortle.Uniforms_flimit_z_set
    __swig_getmethods__["flimit_z"] = _chortle.Uniforms_flimit_z_get
    if _newclass:
        flimit_z = _swig_property(_chortle.Uniforms_flimit_z_get, _chortle.Uniforms_flimit_z_set)
    __swig_setmethods__["julia_C_x"] = _chortle.Uniforms_julia_C_x_set
    __swig_getmethods__["julia_C_x"] = _chortle.Uniforms_julia_C_x_get
    if _newclass:
        julia_C_x = _swig_property(_chortle.Uniforms_julia_C_x_get, _chortle.Uniforms_julia_C_x_set)
    __swig_setmethods__["julia_C_y"] = _chortle.Uniforms_julia_C_y_set
    __swig_getmethods__["julia_C_y"] = _chortle.Uniforms_julia_C_y_get
    if _newclass:
        julia_C_y = _swig_property(_chortle.Uniforms_julia_C_y_get, _chortle.Uniforms_julia_C_y_set)
    __swig_setmethods__["julia_C_z"] = _chortle.Uniforms_julia_C_z_set
    __swig_getmethods__["julia_C_z"] = _chortle.Uniforms_julia_C_z_get
    if _newclass:
        julia_C_z = _swig_property(_chortle.Uniforms_julia_C_z_get, _chortle.Uniforms_julia_C_z_set)
    __swig_setmethods__["julia_offset_x"] = _chortle.Uniforms_julia_offset_x_set
    __swig_getmethods__["julia_offset_x"] = _chortle.Uniforms_julia_offset_x_get
    if _newclass:
        julia_offset_x = _swig_property(_chortle.Uniforms_julia_offset_x_get, _chortle.Uniforms_julia_offset_x_set)
    __swig_setmethods__["julia_offset_y"] = _chortle.Uniforms_julia_offset_y_set
    __swig_getmethods__["julia_offset_y"] = _chortle.Uniforms_julia_offset_y_get
    if _newclass:
        julia_offset_y = _swig_property(_chortle.Uniforms_julia_offset_y_get, _chortle.Uniforms_julia_offset_y_set)
    __swig_setmethods__["julia_offset_z"] = _chortle.Uniforms_julia_offset_z_set
    __swig_getmethods__["julia_offset_z"] = _chortle.Uniforms_julia_offset_z_get
    if _newclass:
        julia_offset_z = _swig_property(_chortle.Uniforms_julia_offset_z_get, _chortle.Uniforms_julia_offset_z_set)
    __swig_setmethods__["de_offset"] = _chortle.Uniforms_de_offset_set
    __swig_getmethods__["de_offset"] = _chortle.Uniforms_de_offset_get
    if _newclass:
        de_offset = _swig_property(_chortle.Uniforms_de_offset_get, _chortle.Uniforms_de_offset_set)
    __swig_setmethods__["fog_level"] = _chortle.Uniforms_fog_level_set
    __swig_getmethods__["fog_level"] = _chortle.Uniforms_fog_level_get
    if _newclass:
        fog_level = _swig_property(_chortle.Uniforms_fog_level_get, _chortle.Uniforms_fog_level_set)
    __swig_setmethods__["epsilon"] = _chortle.Uniforms_epsilon_set
    __swig_getmethods__["epsilon"] = _chortle.Uniforms_epsilon_get
    if _newclass:
        epsilon = _swig_property(_chortle.Uniforms_epsilon_get, _chortle.Uniforms_epsilon_set)
    __swig_setmethods__["scale"] = _chortle.Uniforms_scale_set
    __swig_getmethods__["scale"] = _chortle.Uniforms_scale_get
    if _newclass:
        scale = _swig_property(_chortle.Uniforms_scale_get, _chortle.Uniforms_scale_set)
    __swig_setmethods__["min_radius_2"] = _chortle.Uniforms_min_radius_2_set
    __swig_getmethods__["min_radius_2"] = _chortle.Uniforms_min_radius_2_get
    if _newclass:
        min_radius_2 = _swig_property(_chortle.Uniforms_min_radius_2_get, _chortle.Uniforms_min_radius_2_set)
    __swig_setmethods__["fixed_radius_2"] = _chortle.Uniforms_fixed_radius_2_set
    __swig_getmethods__["fixed_radius_2"] = _chortle.Uniforms_fixed_radius_2_get
    if _newclass:
        fixed_radius_2 = _swig_property(_chortle.Uniforms_fixed_radius_2_get, _chortle.Uniforms_fixed_radius_2_set)
    __swig_setmethods__["glow_strength"] = _chortle.Uniforms_glow_strength_set
    __swig_getmethods__["glow_strength"] = _chortle.Uniforms_glow_strength_get
    if _newclass:
        glow_strength = _swig_property(_chortle.Uniforms_glow_strength_get, _chortle.Uniforms_glow_strength_set)

    def __init__(self):
        this = _chortle.new_Uniforms()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _chortle.delete_Uniforms
    __del__ = lambda self: None
Uniforms_swigregister = _chortle.Uniforms_swigregister
Uniforms_swigregister(Uniforms)

class OGLRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OGLRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OGLRenderer, name)
    __repr__ = _swig_repr
    OGL_PRESS = _chortle.OGLRenderer_OGL_PRESS
    OGL_RELEASE = _chortle.OGLRenderer_OGL_RELEASE
    OGL_MOUSE_BUTTON_NONE = _chortle.OGLRenderer_OGL_MOUSE_BUTTON_NONE
    OGL_MOUSE_BUTTON_LEFT = _chortle.OGLRenderer_OGL_MOUSE_BUTTON_LEFT
    OGL_MOUSE_BUTTON_RIGHT = _chortle.OGLRenderer_OGL_MOUSE_BUTTON_RIGHT
    OGL_MOUSE_BUTTON_MIDDLE = _chortle.OGLRenderer_OGL_MOUSE_BUTTON_MIDDLE

    def __init__(self, *args):
        this = _chortle.new_OGLRenderer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _chortle.delete_OGLRenderer
    __del__ = lambda self: None

    def draw(self):
        return _chortle.OGLRenderer_draw(self)

    def init(self):
        return _chortle.OGLRenderer_init(self)

    def uninit(self):
        return _chortle.OGLRenderer_uninit(self)

    def RotateX(self, v, degree):
        return _chortle.OGLRenderer_RotateX(self, v, degree)

    def RotateY(self, v, degree):
        return _chortle.OGLRenderer_RotateY(self, v, degree)

    def ArbitraryRotate(self, U, V, W, degreeX, degreeY, point, aim):
        return _chortle.OGLRenderer_ArbitraryRotate(self, U, V, W, degreeX, degreeY, point, aim)

    def createVertexStorage(self):
        return _chortle.OGLRenderer_createVertexStorage(self)

    def loadShaderFiles(self):
        return _chortle.OGLRenderer_loadShaderFiles(self)

    def loadGLSLRenderingProgram(self):
        return _chortle.OGLRenderer_loadGLSLRenderingProgram(self)

    def reloadRaymarchProgram(self):
        return _chortle.OGLRenderer_reloadRaymarchProgram(self)

    def errorCallback(self, error, description):
        return _chortle.OGLRenderer_errorCallback(self, error, description)

    def reshapeCallback(self, w, h):
        return _chortle.OGLRenderer_reshapeCallback(self, w, h)

    def keyCallback(self, key, action, mods):
        return _chortle.OGLRenderer_keyCallback(self, key, action, mods)

    def cursorPosCallback(self, xpos, ypos):
        return _chortle.OGLRenderer_cursorPosCallback(self, xpos, ypos)

    def mouseButtonCallback(self, button, action, mods, wx, wy):
        return _chortle.OGLRenderer_mouseButtonCallback(self, button, action, mods, wx, wy)

    def scrollCallback(self, xoffset, yoffset):
        return _chortle.OGLRenderer_scrollCallback(self, xoffset, yoffset)

    def setRaymarchIterations(self, n):
        return _chortle.OGLRenderer_setRaymarchIterations(self, n)

    def setFractalIterations(self, n):
        return _chortle.OGLRenderer_setFractalIterations(self, n)

    def setFLimitX(self, flx):
        return _chortle.OGLRenderer_setFLimitX(self, flx)

    def setFLimitY(self, fly):
        return _chortle.OGLRenderer_setFLimitY(self, fly)

    def setFLimitZ(self, flz):
        return _chortle.OGLRenderer_setFLimitZ(self, flz)

    def setFractalScale(self, s):
        return _chortle.OGLRenderer_setFractalScale(self, s)

    def setMR2(self, r):
        return _chortle.OGLRenderer_setMR2(self, r)

    def setFR2(self, r):
        return _chortle.OGLRenderer_setFR2(self, r)

    def setJuliaCx(self, jcx):
        return _chortle.OGLRenderer_setJuliaCx(self, jcx)

    def setJuliaCy(self, jcy):
        return _chortle.OGLRenderer_setJuliaCy(self, jcy)

    def setJuliaCz(self, jcz):
        return _chortle.OGLRenderer_setJuliaCz(self, jcz)

    def setJuliaOffsetX(self, jofx):
        return _chortle.OGLRenderer_setJuliaOffsetX(self, jofx)

    def setJuliaOffsetY(self, jofy):
        return _chortle.OGLRenderer_setJuliaOffsetY(self, jofy)

    def setJuliaOffsetZ(self, jofz):
        return _chortle.OGLRenderer_setJuliaOffsetZ(self, jofz)

    def setDEOffset(self, deof):
        return _chortle.OGLRenderer_setDEOffset(self, deof)

    def setGlowStrength(self, s):
        return _chortle.OGLRenderer_setGlowStrength(self, s)

    def setEpsilon(self, s):
        return _chortle.OGLRenderer_setEpsilon(self, s)

    def getConfiguration(self):
        return _chortle.OGLRenderer_getConfiguration(self)
OGLRenderer_swigregister = _chortle.OGLRenderer_swigregister
OGLRenderer_swigregister(OGLRenderer)

# This file is compatible with both classic and new-style classes.


